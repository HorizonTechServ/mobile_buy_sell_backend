server:
  port: ${ENV_SERVER_PORT:8081}
  servlet:
    context-path: ${ENV_CONTEXT_PATH:/mobile/api}
#  ssl:
#    enabled: true
#    key-store: classpath:keystore.p12
#    key-store-password: Vimal@8086
#    key-store-type: PKCS12
#    key-alias: springboot

  error:
    whitelabel:
      enabled: false
    path: /error-413

logging:
  print:
    payload: ${ENV_PRINT_PAYLOAD:true}
  level:
    root: ${ENV_ROOT_LOG_LEVEL:INFO}
    com.one: ${ENV_ONE_LOG_LEVEL:DEBUG}

spring:
  servlet:
    multipart:
      enabled: true
      max-file-size: 5MB
      max-request-size: 5MB

  jpa:
    show-sql: true # Enables SQL query logging
    properties:
      hibernate:
        jdbc.batch_size: 30
    hibernate:
      naming:
        physical-strategy: com.one.mobilebuysellAPI.config.CustomCaseNamingStrategy
      ddl-auto: update # Use 'create' for first-time setup, 'update' for changes
  jackson:
    serialization:
      write-dates-as-timestamps: false
  profiles:
    active: ${ENV_PROFILE:local}
  output: 
    ansi: 
      enabled: always
  application:
    name: ${ENV_APP_NAME:society_api}
  datasource:

    url: jdbc:mysql://localhost:3306/mobile
    username: root
    password: root

    #url: ${ENV_DB_URL:jdbc:mysql://216.48.180.92:3306/pravin_test}
    #username: ${ENV_DB_USERNAME:root}
    #password: ${ENV_DB_PASSWORD:diameterserver@2024@db}
    driver-class-name: com.mysql.cj.jdbc.Driver

    jpa:
        database-platform: org.hibernate.dialect.MySQL8Dialect
        hibernate:
          ddl-auto: update  # Change as needed: none, validate, create, or create-drop
        show-sql: true


  mail:
    host: smtp.gmail.com
    port: 587
    username: horizontechservinfo@gmail.com
    password: ddux jrba sqst xnre

    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
cors:
  allowed-origins: "http://localhost:5173"


springdoc:
  swagger-ui:
    enabled: true
  api-docs:
    enabled: true

jwt:
  secret: "c2VjdXJlLXNlY3JldC1rZXktZm9yLWp3dC1hdXRoZW50aWNhdGlvbg=="  # Replace with a strong secret key
  expirationMs: 1800000       # Token expiration time in milliseconds (e.g., 30 min)
  refreshExpirationMs: 604800000 # 7 days validity for refresh token (604800000)

management:
  endpoints:
    web:
      exposure:
        include: "*" 


feign:
  client:
    config:
      default:
        connectTimeout: 10000
        readTimeout: 5000